.data
msg_succesful:
	.asciiz "GOOD"

init_regs:			 			#сохранение в памяти по адресу-метке
.word 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2
.word 1, 0, 1, 2, 4, 8, 16, 32, 64, 128 
.word 256, 512, 1024, 512, 256, 128, 64, 32, 16, 8
right_answer:
.word 1032, 1544, 1800, 1928, 1992, 2024, 2040, 2040, 2044, 2046
.word 2047
save_x2:			
.word 0

.text
main:   
	la x1, init_regs 			#загрузка адреса в x1 <-init_regs
    lw x2, 0(x1)				#загрузка значения (32-битное) x2 = 1024 (то, что по адресу x1 (init_regs) + смещение (0)
    lw x3, 4(x1)				#загрузка значения (32-битное) x3 = 512 (то, что по адресу x1 (init_regs) + смещение (4*8бит = 32бита)
    lw x4, 8(x1)				#загрузка значения (32-битное) x4 = 256 (то, что по адресу x1 (init_regs) + смещение (8*8бит = 64бита)
    lw x5, 12(x1)				#загрузка значения (32-битное) x5 = 128
    lw x6, 16(x1)				#загрузка значения (32-битное) x6 = 64
    lw x7, 20(x1)				#загрузка значения (32-битное) x7 = 32
    lw x8, 24(x1)				#загрузка значения (32-битное) x8 = 16
    lw x9, 28(x1)				#загрузка значения (32-битное) x9 = 8
    lw x10, 32(x1)				#загрузка значения (32-битное) x10 = 4
    lw x11, 36(x1)				#загрузка значения (32-битное) x11 = 2
    lw x12, 40(x1)				#загрузка значения (32-битное) x12 = 1
    lw x13, 44(x1)				#загрузка значения (32-битное) x13 = 0
    lw x14, 48(x1)				#загрузка значения (32-битное) x14 = 1
    lw x15, 52(x1)				#загрузка значения (32-битное) x15 = 2
    lw x16, 56(x1)				#загрузка значения (32-битное) x16 = 4
    lw x17, 60(x1)				#загрузка значения (32-битное) x17 = 8
    lw x18, 64(x1)				#загрузка значения (32-битное) x18 = 16
    lw x19, 68(x1)				#загрузка значения (32-битное) x19 = 32
    lw x20, 72(x1)				#загрузка значения (32-битное) x20 = 64
    lw x21, 76(x1)				#загрузка значения (32-битное) x21 = 128
    lw x22, 80(x1)				#загрузка значения (32-битное) x22 = 256
    lw x23, 84(x1)				#загрузка значения (32-битное) x23 = 512
    lw x24, 88(x1)				#загрузка значения (32-битное) x24 = 1024
    lw x25, 92(x1)				#загрузка значения (32-битное) x25 = 512
    lw x26, 96(x1)				#загрузка значения (32-битное) x26 = 256
    lw x27, 100(x1)				#загрузка значения (32-битное) x27 = 128
    lw x28, 104(x1)				#загрузка значения (32-битное) x28 = 64
    lw x29, 108(x1)				#загрузка значения (32-битное) x29 = 32
    lw x30, 112(x1)				#загрузка значения (32-битное) x30 = 16
    lw x31, 116(x1)				#загрузка значения (32-битное) x31 = 8

	or x2, x2, x31				#x2 = x2 or x31 = 1024 or 8 = 1032
    or x3, x3, x2				#x3 = x3 or x2 = 512 or 1032 = 1544
    or x4, x4, x3				#x4 = x4 or x3 = 256 or 1544 = 1800
    or x5, x5, x4				#x5 = x5 or x4 = 128 or 1800 = 1928
    or x6, x6, x5				#x6 = x6 or x5 = 64 or 1928 = 1992
    or x7, x7, x6				#x7 = x7 or x6 = 32 or 1992 = 2024
    or x8, x8, x7				#x8 = x8 or x7 = 16 or 2024 = 2040
    or x9, x9,x8				#x9 = x9 or x8 = 8 or 2040 = 2040
    or x10, x10, x9				#x10 = x10 or x9 = 4 or 2040 = 2044
    or x11, x11, x10			#x11 = x11 or x10 = 2 or 2044 = 2046
    or x12, x12, x11			#x12 = x12 or x11 = 1 or 2046 = 2047
    or x13, x13, x12			#x13 = x13 or x12 = 0 or 2047 = 2047
    or x14, x14, x13			#x14 = x14 or x13 = 1 or 2047 = 2047
    or x15, x15, x14			#x15 = x15 or x14 = 2 or 2047 = 2047
    or x16, x16, x15			#x16 = x16 or x15 = 4 or 2047 = 2047 
    or x17, x17, x16			#x17 = x17 or x16 = 8 or 2047 = 2047
    or x18, x18, x17			#x18 = x18 or x17 = 16 or 2047 = 2047
    or x19, x19, x18			#x19 = x19 or x18 = 32 or 2047 = 2047
    or x20, x20, x19			#x20 = x20 or x19 = 64 or 2047 = 2047
    or x21, x21, x20			#x21 = x21 or x20 = 128 or 2047 = 2047
    or x22, x22, x21			#x22 = x22 or x21 = 256 or 2047 = 2047
    or x23, x23, x22			#x23 = x23 or x22 = 512 or 2047 = 2047
    or x24, x24, x23			#x24 = x24 or x23 = 1024 or 2047 = 2047
    or x25, x25, x24			#x25 = x25 or x24 = 512 or 2047 = 2047
    or x26, x26, x25			#x26 = x26 or x25 = 256 or 2047 = 2047
    or x27, x27, x26			#x27 = x27 or x26 = 128 or 2047 = 2047
    or x28, x28, x27			#x28 = x28 or x27 = 64 or 2047 = 2047
    or x29, x29, x28			#x29 = x29 or x28 = 32 or 2047 = 2047
    or x30, x30, x29			#x30 = x30 or x29 = 16 or 2047 = 2047
    or x31, x31, x30			#x31 = x31 or x30 = 8 or 2047 = 2047
    
    la x1, save_x2				#загрузка адреса в x1 <-save_x2
    sw x2, 0(x1)				#по адресу x1 с 0 смещением сохраняем x2,
    							#можно x2 будет мучать как некоторый temp
    
    la x1, right_answer			#загрузка адреса в x1 <-right_answer
    lw x2, 4(x1)				#загрузка значения (32-битное) x2 = 1544 (то, что по адресу x1 (right_answer) + смещение (4*8бит = 32бита)
    bne x3, x2, test_failed		#если x2 != x3 => переход по адресу test_failed
	lw x2, 8(x1)				#загрузка значения (32-битное) x2 = 1800 (то, что по адресу x1 (right_answer) + смещение (8*8бит = 64бита)
    bne x4, x2, test_failed		#если x2 != x4 => переход по адресу test_failed
    lw x2, 12(x1)				#загрузка значения (32-битное) x2 = 1928
    bne x5, x2, test_failed		#если x2 != x5 => переход по адресу test_failed
    lw x2, 16(x1)				#загрузка значения (32-битное) x2 = 1992
    bne x6, x2, test_failed		#если x2 != x6 => переход по адресу test_failed
    lw x2, 20(x1)				#загрузка значения (32-битное) x2 = 2024
    bne x7, x2, test_failed		#если x2 != x7 => переход по адресу test_failed
    lw x2, 24(x1)				#загрузка значения (32-битное) x2 = 2040
    bne x8, x2, test_failed		#если x2 != x8 => переход по адресу test_failed
    lw x2, 28(x1)				#загрузка значения (32-битное) x2 = 2040
    bne x9, x2, test_failed		#если x2 != x9 => переход по адресу test_failed
    lw x2, 32(x1)				#загрузка значения (32-битное) x2 = 2044
    bne x10, x2, test_failed	#если x2 != x10 => переход по адресу test_failed
    lw x2, 36(x1)				#загрузка значения (32-битное) x2 = 2046
    bne x11, x2, test_failed	#если x2 != x11 => переход по адресу test_failed
    lw x2, 40(x1)				#загрузка значения (32-битное) x2 = 2047 
								#дальше все 2047
    bne x12, x2, test_failed	#если x2 != x12 => переход по адресу test_failed
    bne x13, x2, test_failed	#если x2 != x13 => переход по адресу test_failed
    bne x14, x2, test_failed	#если x2 != x14 => переход по адресу test_failed
    bne x15, x2, test_failed	#если x2 != x15 => переход по адресу test_failed
    bne x16, x2, test_failed	#если x2 != x16 => переход по адресу test_failed
    bne x17, x2, test_failed	#если x2 != x17 => переход по адресу test_failed
    bne x18, x2, test_failed	#если x2 != x18 => переход по адресу test_failed
    bne x19, x2, test_failed	#если x2 != x19 => переход по адресу test_failed
    bne x20, x2, test_failed	#если x2 != x20 => переход по адресу test_failed
    bne x21, x2, test_failed	#если x2 != x21 => переход по адресу test_failed
    bne x22, x2, test_failed	#если x2 != x22 => переход по адресу test_failed
    bne x23, x2, test_failed	#если x2 != x23 => переход по адресу test_failed
    bne x24, x2, test_failed	#если x2 != x24 => переход по адресу test_failed
    bne x25, x2, test_failed	#если x2 != x25 => переход по адресу test_failed
    bne x26, x2, test_failed	#если x2 != x26 => переход по адресу test_failed
    bne x27, x2, test_failed	#если x2 != x27 => переход по адресу test_failed
    bne x28, x2, test_failed	#если x2 != x28 => переход по адресу test_failed
    bne x29, x2, test_failed	#если x2 != x29 => переход по адресу test_failed
    bne x30, x2, test_failed	#если x2 != x30 => переход по адресу test_failed
    bne x31, x2, test_failed	#если x2 != x31 => переход по адресу test_failed
    
    lw x3, 0(x1)				#загрузка значения (32-битное) x3 = 1032

	la x1, save_x2				#загрузка адреса в x1 <-save_x2
    lw x2, 0(x1)				#загрузка значения (32-битное) x2 из адреса x1(save_x2) с 0 смещением
    bne x3, x2, test_failed		#если x2 != x3 => переход по адресу test_failed

test_successful:
    li a0, 4 					#системный вызов: печать строки (печать строки по адресу a1)
    la a1, msg_succesful 		#загрузка в a1 адреса msg_succesgul
    ecall						#сам вызов
    j    exit
test_failed:
    li a0, 1					#системный вызов: печать числа (печать числа по адресу a1)
    li a1, 0					#загрузка в а1 числа 0
    ecall						#сам вызов
exit:
    li a0, 10					#системный вызов: для окончания программы
    ecall 						#сам вызов
